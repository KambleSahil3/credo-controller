diff --git a/node_modules/@credo-ts/core/build/modules/credentials/formats/jsonld/JsonLdCredentialFormat.d.ts b/node_modules/@credo-ts/core/build/modules/credentials/formats/jsonld/JsonLdCredentialFormat.d.ts
index d12468b..09bd3b1 100644
--- a/node_modules/@credo-ts/core/build/modules/credentials/formats/jsonld/JsonLdCredentialFormat.d.ts
+++ b/node_modules/@credo-ts/core/build/modules/credentials/formats/jsonld/JsonLdCredentialFormat.d.ts
@@ -10,7 +10,79 @@ export interface JsonCredential {
     issuanceDate: string;
     expirationDate?: string;
     credentialSubject: SingleOrArray<JsonObject>;
-    [key: string]: unknown;
+    credentialStatus?: SingleOrArray<CredentialStatus>
+    [key: string]: unknown
+}
+type CredentialStatusType = 'BitstringStatusListEntry'
+
+// The purpose can be anything apart from this as well
+export enum CredentialStatusPurpose {
+  'revocation' = 'revocation',
+  'suspension' = 'suspension',
+  'message' = 'message',
+}
+export interface StatusMessage {
+  // a string representing the hexadecimal value of the status prefixed with 0x
+  status: string
+  // a string used by software developers to assist with debugging which SHOULD NOT be displayed to end users
+  message?: string
+  // We can have some key value pairs as well
+  [key: string]: unknown
+}
+
+/**
+* "credentialStatus": {
+  "id": "https://example.com/credentials/status/8#492847",
+  "type": "BitstringStatusListEntry",
+  "statusPurpose": "message",
+  "statusListIndex": "492847",
+  "statusSize": 2,
+  "statusListCredential": "https://example.com/credentials/status/8",
+  "statusMessage": [
+      {"status":"0x0", "message":"pending_review"},
+      {"status":"0x1", "message":"accepted"},
+      {"status":"0x2", "message":"rejected"},
+      ...
+  ],
+  "statusReference": "https://example.org/status-dictionary/"
+}
+*/
+
+/**
+* "credentialStatus": [{
+  "id": "https://example.com/credentials/status/3#94567",
+  "type": "BitstringStatusListEntry",
+  "statusPurpose": "revocation",
+  "statusListIndex": "94567",
+  "statusListCredential": "https://example.com/credentials/status/3"
+}, {
+  "id": "https://example.com/credentials/status/4#23452",
+  "type": "BitstringStatusListEntry",
+  "statusPurpose": "suspension",
+  "statusListIndex": "23452",
+  "statusListCredential": "https://example.com/credentials/status/4"
+}]
+*/
+export interface CredentialStatus {
+  id: string
+  // Since currenlty we are only trying to support 'BitStringStatusListEntry'
+  type: CredentialStatusType
+  statusPurpose: CredentialStatusPurpose
+  // Unique identifier for the specific credential
+  statusListIndex: string
+  // Must be url referencing to a VC of type 'BitstringStatusListCredential'
+  statusListCredential: string
+  // The statusSize indicates the size of the status entry in bits
+  statusSize?: number
+  // Must be preset if statusPurpose is message
+  /**
+   * the length of which MUST equal the number of possible status messages indicated by statusSize
+   * (e.g., statusMessage array MUST have 2 elements if statusSize has 1 bit,
+   * 4 elements if statusSize has 2 bits, 8 elements if statusSize has 3 bits, etc.).
+   */
+  statusMessage?: StatusMessage[]
+  // An implementer MAY include the statusReference property. If present, its value MUST be a URL or an array of URLs [URL] which dereference to material related to the status
+  statusReference?: SingleOrArray<string>
 }
 /**
  * Format for creating a jsonld proposal, offer or request.
diff --git a/node_modules/@credo-ts/core/build/modules/credentials/formats/jsonld/JsonLdCredentialFormatService.d.ts b/node_modules/@credo-ts/core/build/modules/credentials/formats/jsonld/JsonLdCredentialFormatService.d.ts
index 2006259..afc834e 100644
--- a/node_modules/@credo-ts/core/build/modules/credentials/formats/jsonld/JsonLdCredentialFormatService.d.ts
+++ b/node_modules/@credo-ts/core/build/modules/credentials/formats/jsonld/JsonLdCredentialFormatService.d.ts
@@ -27,6 +27,7 @@ export declare class JsonLdCredentialFormatService implements CredentialFormatSe
      * @returns object containing associated attachment, formats and offersAttach elements
      *
      */
+    // Trail: W3C revocation: Change in payload
     createOffer(agentContext: AgentContext, { credentialFormats, attachmentId }: CredentialFormatCreateOfferOptions<JsonLdCredentialFormat>): Promise<CredentialFormatCreateOfferReturn>;
     processOffer(agentContext: AgentContext, { attachment }: CredentialFormatProcessOptions): Promise<void>;
     acceptOffer(agentContext: AgentContext, { attachmentId, offerAttachment }: CredentialFormatAcceptOfferOptions<JsonLdCredentialFormat>): Promise<CredentialFormatCreateReturn>;
diff --git a/node_modules/@credo-ts/core/build/modules/credentials/protocol/v2/V2CredentialProtocol.js b/node_modules/@credo-ts/core/build/modules/credentials/protocol/v2/V2CredentialProtocol.js
index fb1fb9d..ac871bf 100644
--- a/node_modules/@credo-ts/core/build/modules/credentials/protocol/v2/V2CredentialProtocol.js
+++ b/node_modules/@credo-ts/core/build/modules/credentials/protocol/v2/V2CredentialProtocol.js
@@ -530,6 +530,7 @@ class V2CredentialProtocol extends BaseCredentialProtocol_1.BaseCredentialProtoc
         if (formatServices.length === 0) {
             throw new error_1.CredoError(`Unable to accept request. No supported formats provided as input or in request message`);
         }
+
         const message = await this.credentialFormatCoordinator.acceptRequest(agentContext, {
             credentialRecord,
             formatServices,
@@ -584,6 +585,7 @@ class V2CredentialProtocol extends BaseCredentialProtocol_1.BaseCredentialProtoc
         if (formatServices.length === 0) {
             throw new error_1.CredoError(`Unable to process credential. No supported formats`);
         }
+        console.log("--------------------------------------------------------------------");
         await this.credentialFormatCoordinator.processCredential(messageContext.agentContext, {
             credentialRecord,
             formatServices,
diff --git a/node_modules/@credo-ts/core/build/modules/vc/data-integrity/W3cJsonLdCredentialService.d.ts b/node_modules/@credo-ts/core/build/modules/vc/data-integrity/W3cJsonLdCredentialService.d.ts
index 4176d33..12ce7e8 100644
--- a/node_modules/@credo-ts/core/build/modules/vc/data-integrity/W3cJsonLdCredentialService.d.ts
+++ b/node_modules/@credo-ts/core/build/modules/vc/data-integrity/W3cJsonLdCredentialService.d.ts
@@ -13,6 +13,7 @@ import { W3cJsonLdVerifiablePresentation } from './models/W3cJsonLdVerifiablePre
 export declare class W3cJsonLdCredentialService {
     private signatureSuiteRegistry;
     private w3cCredentialsModuleConfig;
+    private w3cCredentialService;
     constructor(signatureSuiteRegistry: SignatureSuiteRegistry, w3cCredentialsModuleConfig: W3cCredentialsModuleConfig);
     /**
      * Signs a credential
diff --git a/node_modules/@credo-ts/core/build/modules/vc/data-integrity/W3cJsonLdCredentialService.js b/node_modules/@credo-ts/core/build/modules/vc/data-integrity/W3cJsonLdCredentialService.js
index 3fa8bf2..13dc96f 100644
--- a/node_modules/@credo-ts/core/build/modules/vc/data-integrity/W3cJsonLdCredentialService.js
+++ b/node_modules/@credo-ts/core/build/modules/vc/data-integrity/W3cJsonLdCredentialService.js
@@ -39,6 +39,9 @@ const jsonld_1 = __importDefault(require("./libraries/jsonld"));
 const vc_1 = __importDefault(require("./libraries/vc"));
 const models_1 = require("./models");
 const W3cJsonLdVerifiablePresentation_1 = require("./models/W3cJsonLdVerifiablePresentation");
+const { promisify } = require('util');
+const zlib = require('zlib');
+
 /**
  * Supports signing and verification of credentials according to the [Verifiable Credential Data Model](https://www.w3.org/TR/vc-data-model)
  * using [Data Integrity Proof](https://www.w3.org/TR/vc-data-model/#data-integrity-proofs).
@@ -98,14 +101,41 @@ let W3cJsonLdCredentialService = class W3cJsonLdCredentialService {
                 credential: utils_1.JsonTransformer.toJSON(options.credential),
                 suite: suites,
                 documentLoader: this.w3cCredentialsModuleConfig.documentLoader(agentContext),
-                checkStatus: ({ credential }) => {
+                checkStatus: async ({ credential }) => {
+                    
+                    // Note: currety comment this change to avoid passing credetials with credentialStatus
                     // Only throw error if credentialStatus is present
                     if (verifyCredentialStatus && 'credentialStatus' in credential) {
-                        throw new error_1.CredoError('Verifying credential status for JSON-LD credentials is currently not supported');
+                        // TODO: add logic to verify credentialStatus
+                        // throw new CredoError('Verifying credential status for JSON-LD credentials is currently not supported')
+                        const credentialStatusURL = credential.credentialStatus.statusListCredential;
+                        const bitStringStatusListCredential = await agentContext.config.agentDependencies.fetch(credentialStatusURL, {
+                            method: 'GET',
+                          });
+                      
+                          if (!bitStringStatusListCredential.ok) {
+                            throw new error_1.CredoError(`HTTP error! Status: ${bitStringStatusListCredential.status}`);
+                          }
+                      
+                          const bitStringCredential = await bitStringStatusListCredential.json();
+                          const encodedBitString = bitStringCredential.credential.credentialSubject.encodedList
+                          const gunzip = promisify(zlib.gunzip);
+
+                          const compressedBuffer = Buffer.from(encodedBitString, 'base64');
+                          const decompressedBuffer = await gunzip(compressedBuffer);
+                          const decodedBitString = decompressedBuffer.toString('binary');
+                          
+                          if (credential.credentialStatus.statusListIndex < 0 || credential.credentialStatus.statusListIndex >= decodedBitString.length) {
+                            throw new error_1.CredoError('Index out of bounds');
+                          }
+
+                          if(decodedBitString[credential.credentialStatus.statusListIndex] === '1'){
+                            throw new error_1.CredoError(`Credential at index ${credential.credentialStatus.statusListIndex} is revoked.`);
+                          }
                     }
                     return {
-                        verified: true,
-                    };
+                      verified: true,
+                    }
                 },
             };
             // this is a hack because vcjs throws if purpose is passed as undefined or null
@@ -219,7 +249,41 @@ let W3cJsonLdCredentialService = class W3cJsonLdCredentialService {
                 challenge: options.challenge,
                 domain: options.domain,
                 documentLoader: this.w3cCredentialsModuleConfig.documentLoader(agentContext),
+                checkStatus: async ({ credential }) => {
+                    
+                    if ('credentialStatus' in credential) {
+
+                        const credentialStatusURL = credential.credentialStatus.statusListCredential;
+                        const bitStringStatusListCredential = await agentContext.config.agentDependencies.fetch(credentialStatusURL, {
+                            method: 'GET',
+                          });
+                      
+                          if (!bitStringStatusListCredential.ok) {
+                            throw new error_1.CredoError(`HTTP error! Status: ${bitStringStatusListCredential.status}`);
+                          }
+                      
+                          const bitStringCredential = await bitStringStatusListCredential.json();
+                          const encodedBitString = bitStringCredential.credential.credentialSubject.encodedList
+                          const gunzip = promisify(zlib.gunzip);
+
+                          const compressedBuffer = Buffer.from(encodedBitString, 'base64');
+                          const decompressedBuffer = await gunzip(compressedBuffer);
+                          const decodedBitString = decompressedBuffer.toString('binary');
+                          
+                          if (credential.credentialStatus.statusListIndex < 0 || credential.credentialStatus.statusListIndex >= decodedBitString.length) {
+                            throw new error_1.CredoError('Index out of bounds');
+                          }
+
+                          if(decodedBitString[credential.credentialStatus.statusListIndex] === '1'){
+                            throw new error_1.CredoError(`Credential at index ${credential.credentialStatus.statusListIndex} is revoked.`);
+                          }
+                    }
+                    return {
+                      verified: true,
+                    }
+                },
             };
+
             // this is a hack because vcjs throws if purpose is passed as undefined or null
             if (options.purpose) {
                 verifyOptions['presentationPurpose'] = options.purpose;
@@ -305,7 +369,8 @@ let W3cJsonLdCredentialService = class W3cJsonLdCredentialService {
 W3cJsonLdCredentialService = __decorate([
     (0, plugins_1.injectable)(),
     __metadata("design:paramtypes", [SignatureSuiteRegistry_1.SignatureSuiteRegistry,
-        W3cCredentialsModuleConfig_1.W3cCredentialsModuleConfig])
+        W3cCredentialsModuleConfig_1.W3cCredentialsModuleConfig
+    ])
 ], W3cJsonLdCredentialService);
 exports.W3cJsonLdCredentialService = W3cJsonLdCredentialService;
 //# sourceMappingURL=W3cJsonLdCredentialService.js.map
\ No newline at end of file
diff --git a/node_modules/@credo-ts/core/build/modules/vc/models/credential/W3cCredential.d.ts b/node_modules/@credo-ts/core/build/modules/vc/models/credential/W3cCredential.d.ts
index dbd8dba..b3deac2 100644
--- a/node_modules/@credo-ts/core/build/modules/vc/models/credential/W3cCredential.d.ts
+++ b/node_modules/@credo-ts/core/build/modules/vc/models/credential/W3cCredential.d.ts
@@ -4,7 +4,7 @@ import type { JsonObject } from '../../../../types';
 import type { ValidationOptions } from 'class-validator';
 import { SingleOrArray } from '../../../../utils/type';
 import { W3cCredentialSchema } from './W3cCredentialSchema';
-import { W3cCredentialStatus } from './W3cCredentialStatus';
+import { W3cCredentialStatus, W3cCredentialStatusOptions } from './W3cCredentialStatus';
 import { W3cCredentialSubject } from './W3cCredentialSubject';
 import { W3cIssuer } from './W3cIssuer';
 export interface W3cCredentialOptions {
@@ -15,7 +15,7 @@ export interface W3cCredentialOptions {
     issuanceDate: string;
     expirationDate?: string;
     credentialSubject: SingleOrArray<W3cCredentialSubjectOptions>;
-    credentialStatus?: W3cCredentialStatus;
+    credentialStatus: W3cCredentialStatus | Array<W3cCredentialStatus>;
 }
 export declare class W3cCredential {
     constructor(options: W3cCredentialOptions);
@@ -27,7 +27,7 @@ export declare class W3cCredential {
     expirationDate?: string;
     credentialSubject: SingleOrArray<W3cCredentialSubject>;
     credentialSchema?: SingleOrArray<W3cCredentialSchema>;
-    credentialStatus?: W3cCredentialStatus;
+    credentialStatus: W3cCredentialStatus | Array<W3cCredentialStatus>;
     get issuerId(): string;
     get credentialSchemaIds(): string[];
     get credentialSubjectIds(): string[];
diff --git a/node_modules/@credo-ts/core/build/modules/vc/models/credential/W3cCredential.js b/node_modules/@credo-ts/core/build/modules/vc/models/credential/W3cCredential.js
index 800214f..b064d9e 100644
--- a/node_modules/@credo-ts/core/build/modules/vc/models/credential/W3cCredential.js
+++ b/node_modules/@credo-ts/core/build/modules/vc/models/credential/W3cCredential.js
@@ -35,10 +35,12 @@ class W3cCredential {
             this.expirationDate = options.expirationDate;
             this.credentialSubject = (0, utils_1.mapSingleOrArray)(options.credentialSubject, (subject) => subject instanceof W3cCredentialSubject_1.W3cCredentialSubject ? subject : new W3cCredentialSubject_1.W3cCredentialSubject(subject));
             if (options.credentialStatus) {
-                this.credentialStatus =
-                    options.credentialStatus instanceof W3cCredentialStatus_1.W3cCredentialStatus
-                        ? options.credentialStatus
-                        : new W3cCredentialStatus_1.W3cCredentialStatus(options.credentialStatus);
+                console.log('options.credentialStatus----', options.credentialStatus);
+                this.credentialStatus = (0, utils_1.mapSingleOrArray)(options.credentialStatus, (status) => status instanceof W3cCredentialStatus_1.W3cCredentialStatus ? status : new W3cCredentialStatus_1.W3cCredentialStatus(status));
+                // this.credentialStatus =
+                //     options.credentialStatus instanceof W3cCredentialStatus_1.W3cCredentialStatus
+                //         ? options.credentialStatus
+                //         : new W3cCredentialStatus_1.W3cCredentialStatus(options.credentialStatus);
             }
         }
     }
diff --git a/node_modules/@credo-ts/core/build/modules/vc/models/credential/W3cCredentialStatus.d.ts b/node_modules/@credo-ts/core/build/modules/vc/models/credential/W3cCredentialStatus.d.ts
index c1f4743..f2ac20d 100644
--- a/node_modules/@credo-ts/core/build/modules/vc/models/credential/W3cCredentialStatus.d.ts
+++ b/node_modules/@credo-ts/core/build/modules/vc/models/credential/W3cCredentialStatus.d.ts
@@ -1,9 +1,15 @@
 export interface W3cCredentialStatusOptions {
     id: string;
     type: string;
+    statusPurpose: string;
+    statusListIndex: string;
+    statusListCredential: string;
 }
 export declare class W3cCredentialStatus {
     constructor(options: W3cCredentialStatusOptions);
     id: string;
     type: string;
+    statusPurpose: string;
+    statusListIndex: string;
+    statusListCredential: string;
 }
diff --git a/node_modules/@credo-ts/core/build/modules/vc/models/credential/W3cCredentialStatus.js b/node_modules/@credo-ts/core/build/modules/vc/models/credential/W3cCredentialStatus.js
index 81355eb..467ebd2 100644
--- a/node_modules/@credo-ts/core/build/modules/vc/models/credential/W3cCredentialStatus.js
+++ b/node_modules/@credo-ts/core/build/modules/vc/models/credential/W3cCredentialStatus.js
@@ -17,6 +17,9 @@ class W3cCredentialStatus {
         if (options) {
             this.id = options.id;
             this.type = options.type;
+            this.statusPurpose = options.statusPurpose;
+            this.statusListIndex = options.statusListIndex;
+            this.statusListCredential = options.statusListCredential;
         }
     }
 }
@@ -28,5 +31,17 @@ __decorate([
     (0, class_validator_1.IsString)(),
     __metadata("design:type", String)
 ], W3cCredentialStatus.prototype, "type", void 0);
+__decorate([
+    (0, class_validator_1.IsString)(),
+    __metadata("design:type", String)
+], W3cCredentialStatus.prototype, "statusPurpose", void 0);
+__decorate([
+    (0, class_validator_1.IsString)(),
+    __metadata("design:type", String)
+], W3cCredentialStatus.prototype, "statusListIndex", void 0);
+__decorate([
+    (0, class_validator_1.IsString)(),
+    __metadata("design:type", String)
+], W3cCredentialStatus.prototype, "statusListCredential", void 0);
 exports.W3cCredentialStatus = W3cCredentialStatus;
 //# sourceMappingURL=W3cCredentialStatus.js.map
\ No newline at end of file
