diff --git a/node_modules/@credo-ts/core/build/modules/credentials/formats/jsonld/JsonLdCredentialFormat.d.ts b/node_modules/@credo-ts/core/build/modules/credentials/formats/jsonld/JsonLdCredentialFormat.d.ts
index d12468b..09bd3b1 100644
--- a/node_modules/@credo-ts/core/build/modules/credentials/formats/jsonld/JsonLdCredentialFormat.d.ts
+++ b/node_modules/@credo-ts/core/build/modules/credentials/formats/jsonld/JsonLdCredentialFormat.d.ts
@@ -10,7 +10,79 @@ export interface JsonCredential {
     issuanceDate: string;
     expirationDate?: string;
     credentialSubject: SingleOrArray<JsonObject>;
-    [key: string]: unknown;
+    credentialStatus?: SingleOrArray<CredentialStatus>
+    [key: string]: unknown
+}
+type CredentialStatusType = 'BitstringStatusListEntry'
+
+// The purpose can be anything apart from this as well
+export enum CredentialStatusPurpose {
+  'revocation' = 'revocation',
+  'suspension' = 'suspension',
+  'message' = 'message',
+}
+export interface StatusMessage {
+  // a string representing the hexadecimal value of the status prefixed with 0x
+  status: string
+  // a string used by software developers to assist with debugging which SHOULD NOT be displayed to end users
+  message?: string
+  // We can have some key value pairs as well
+  [key: string]: unknown
+}
+
+/**
+* "credentialStatus": {
+  "id": "https://example.com/credentials/status/8#492847",
+  "type": "BitstringStatusListEntry",
+  "statusPurpose": "message",
+  "statusListIndex": "492847",
+  "statusSize": 2,
+  "statusListCredential": "https://example.com/credentials/status/8",
+  "statusMessage": [
+      {"status":"0x0", "message":"pending_review"},
+      {"status":"0x1", "message":"accepted"},
+      {"status":"0x2", "message":"rejected"},
+      ...
+  ],
+  "statusReference": "https://example.org/status-dictionary/"
+}
+*/
+
+/**
+* "credentialStatus": [{
+  "id": "https://example.com/credentials/status/3#94567",
+  "type": "BitstringStatusListEntry",
+  "statusPurpose": "revocation",
+  "statusListIndex": "94567",
+  "statusListCredential": "https://example.com/credentials/status/3"
+}, {
+  "id": "https://example.com/credentials/status/4#23452",
+  "type": "BitstringStatusListEntry",
+  "statusPurpose": "suspension",
+  "statusListIndex": "23452",
+  "statusListCredential": "https://example.com/credentials/status/4"
+}]
+*/
+export interface CredentialStatus {
+  id: string
+  // Since currenlty we are only trying to support 'BitStringStatusListEntry'
+  type: CredentialStatusType
+  statusPurpose: CredentialStatusPurpose
+  // Unique identifier for the specific credential
+  statusListIndex: string
+  // Must be url referencing to a VC of type 'BitstringStatusListCredential'
+  statusListCredential: string
+  // The statusSize indicates the size of the status entry in bits
+  statusSize?: number
+  // Must be preset if statusPurpose is message
+  /**
+   * the length of which MUST equal the number of possible status messages indicated by statusSize
+   * (e.g., statusMessage array MUST have 2 elements if statusSize has 1 bit,
+   * 4 elements if statusSize has 2 bits, 8 elements if statusSize has 3 bits, etc.).
+   */
+  statusMessage?: StatusMessage[]
+  // An implementer MAY include the statusReference property. If present, its value MUST be a URL or an array of URLs [URL] which dereference to material related to the status
+  statusReference?: SingleOrArray<string>
 }
 /**
  * Format for creating a jsonld proposal, offer or request.
diff --git a/node_modules/@credo-ts/core/build/modules/credentials/formats/jsonld/JsonLdCredentialFormatService.d.ts b/node_modules/@credo-ts/core/build/modules/credentials/formats/jsonld/JsonLdCredentialFormatService.d.ts
index 2006259..afc834e 100644
--- a/node_modules/@credo-ts/core/build/modules/credentials/formats/jsonld/JsonLdCredentialFormatService.d.ts
+++ b/node_modules/@credo-ts/core/build/modules/credentials/formats/jsonld/JsonLdCredentialFormatService.d.ts
@@ -27,6 +27,7 @@ export declare class JsonLdCredentialFormatService implements CredentialFormatSe
      * @returns object containing associated attachment, formats and offersAttach elements
      *
      */
+    // Trail: W3C revocation: Change in payload
     createOffer(agentContext: AgentContext, { credentialFormats, attachmentId }: CredentialFormatCreateOfferOptions<JsonLdCredentialFormat>): Promise<CredentialFormatCreateOfferReturn>;
     processOffer(agentContext: AgentContext, { attachment }: CredentialFormatProcessOptions): Promise<void>;
     acceptOffer(agentContext: AgentContext, { attachmentId, offerAttachment }: CredentialFormatAcceptOfferOptions<JsonLdCredentialFormat>): Promise<CredentialFormatCreateReturn>;
diff --git a/node_modules/@credo-ts/core/build/modules/vc/data-integrity/W3cJsonLdCredentialService.js b/node_modules/@credo-ts/core/build/modules/vc/data-integrity/W3cJsonLdCredentialService.js
index 3fa8bf2..9ad5f2e 100644
--- a/node_modules/@credo-ts/core/build/modules/vc/data-integrity/W3cJsonLdCredentialService.js
+++ b/node_modules/@credo-ts/core/build/modules/vc/data-integrity/W3cJsonLdCredentialService.js
@@ -99,13 +99,15 @@ let W3cJsonLdCredentialService = class W3cJsonLdCredentialService {
                 suite: suites,
                 documentLoader: this.w3cCredentialsModuleConfig.documentLoader(agentContext),
                 checkStatus: ({ credential }) => {
+                    // Note: currety comment this change to avoid passing credetials with credentialStatus
                     // Only throw error if credentialStatus is present
-                    if (verifyCredentialStatus && 'credentialStatus' in credential) {
-                        throw new error_1.CredoError('Verifying credential status for JSON-LD credentials is currently not supported');
-                    }
+                    // if (verifyCredentialStatus && 'credentialStatus' in credential) {
+                        // TODO: add logic to verify credentialStatus
+                    //   throw new CredoError('Verifying credential status for JSON-LD credentials is currently not supported')
+                    // }
                     return {
-                        verified: true,
-                    };
+                      verified: true,
+                    }
                 },
             };
             // this is a hack because vcjs throws if purpose is passed as undefined or null
