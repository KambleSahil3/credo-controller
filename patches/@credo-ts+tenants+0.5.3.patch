diff --git a/node_modules/@credo-ts/tenants/build/context/TenantAgentContextProvider.d.ts b/node_modules/@credo-ts/tenants/build/context/TenantAgentContextProvider.d.ts
index 91bb8f4..8dd9668 100644
--- a/node_modules/@credo-ts/tenants/build/context/TenantAgentContextProvider.d.ts
+++ b/node_modules/@credo-ts/tenants/build/context/TenantAgentContextProvider.d.ts
@@ -1,5 +1,5 @@
 import type { TenantRecord } from '../repository';
-import type { AgentContextProvider, UpdateAssistantUpdateOptions } from '@credo-ts/core';
+import type { AgentContextProvider, UpdateAssistantUpdateOptions, CacheModule, InMemoryLruCache } from '@credo-ts/core';
 import { AgentContext, EventEmitter, Logger } from '@credo-ts/core';
 import { TenantRecordService } from '../services';
 import { TenantSessionCoordinator } from './TenantSessionCoordinator';
@@ -9,7 +9,9 @@ export declare class TenantAgentContextProvider implements AgentContextProvider
     private eventEmitter;
     private logger;
     private tenantSessionCoordinator;
-    constructor(tenantRecordService: TenantRecordService, rootAgentContext: AgentContext, eventEmitter: EventEmitter, tenantSessionCoordinator: TenantSessionCoordinator, logger: Logger);
+    private cacheModule;
+    private inMemoryLruCache;
+    constructor(tenantRecordService: TenantRecordService, rootAgentContext: AgentContext, eventEmitter: EventEmitter, tenantSessionCoordinator: TenantSessionCoordinator, logger: Logger, cache: InMemoryLruCache);
     getAgentContextForContextCorrelationId(contextCorrelationId: string): Promise<AgentContext>;
     getContextForInboundMessage(inboundMessage: unknown, options?: {
         contextCorrelationId?: string;
diff --git a/node_modules/@credo-ts/tenants/build/context/TenantAgentContextProvider.js b/node_modules/@credo-ts/tenants/build/context/TenantAgentContextProvider.js
index d491d4e..b4ef45b 100644
--- a/node_modules/@credo-ts/tenants/build/context/TenantAgentContextProvider.js
+++ b/node_modules/@credo-ts/tenants/build/context/TenantAgentContextProvider.js
@@ -28,12 +28,21 @@ let TenantAgentContextProvider = class TenantAgentContextProvider {
         this.listenForRoutingKeyCreatedEvents();
     }
     async getAgentContextForContextCorrelationId(contextCorrelationId) {
+        this.logger.debug('Inside Getting tenant agent for tenant ')
         // It could be that the root agent context is requested, in that case we return the root agent context
         if (contextCorrelationId === this.rootAgentContext.contextCorrelationId) {
             return this.rootAgentContext;
         }
         // TODO: maybe we can look at not having to retrieve the tenant record if there's already a context available.
-        const tenantRecord = await this.tenantRecordService.getTenantById(this.rootAgentContext, contextCorrelationId);
+        this.logger.debug('Get from cache')
+        let tenantRecord = await this.catche.config.cache.get(this.rootAgentContext, `contextCorrelationId-${contextCorrelationId}`)
+        if(!tenantRecord) {
+            // TODO: maybe we can look at not having to retrieve the tenant record if there's already a context available.
+            tenantRecord = await this.tenantRecordService.getTenantById(this.rootAgentContext, contextCorrelationId)
+            await this.catche.config.cache.set(this.rootAgentContext,`contextCorrelationId-${contextCorrelationId}`,tenantRecord)
+            this.logger.debug(`Cached tenant agent context for tenant '${contextCorrelationId}'`)
+          }
+
         const shouldUpdate = !(0, core_1.isStorageUpToDate)(tenantRecord.storageVersion);
         // If the tenant storage is not up to date, and autoUpdate is disabled we throw an error
         if (shouldUpdate && !this.rootAgentContext.config.autoUpdateStorageOnStartup) {
@@ -42,9 +51,12 @@ let TenantAgentContextProvider = class TenantAgentContextProvider {
                 `Make sure to update the tenant storage (currently at ${tenantRecord.storageVersion}) to the latest version (${core_1.UpdateAssistant.frameworkStorageVersion}). ` +
                 `You can also downgrade your version of Credo.`);
         }
-        const agentContext = await this.tenantSessionCoordinator.getContextForSession(tenantRecord, {
+
+
+          const agentContext = await this.tenantSessionCoordinator.getContextForSession(tenantRecord, {
             runInMutex: shouldUpdate ? (agentContext) => this._updateTenantStorage(tenantRecord, agentContext) : undefined,
-        });
+          })
+
         this.logger.debug(`Created tenant agent context for tenant '${contextCorrelationId}'`);
         return agentContext;
     }
